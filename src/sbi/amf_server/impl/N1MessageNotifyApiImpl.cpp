/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N1MessageNotifyApiImpl.h"
#include "itti_msg_sbi.hpp"

using namespace amf_application;
namespace oai {
namespace amf {
namespace api {

using namespace oai::amf::model;

N1MessageNotifyApiImpl::N1MessageNotifyApiImpl(
    std::shared_ptr<Pistache::Rest::Router> rtr,
    amf_application::amf_app* amf_app_inst)
    : N1MessageNotifyApi(rtr), m_amf_app(amf_app_inst) {}

void N1MessageNotifyApiImpl::receive_n1_message_notification(
    const std::string& ueContextId,
    const N1MessageNotification& notificationData,
    Pistache::Http::ResponseWriter& response) {
  Logger::amf_server().debug("Receive N1MessageNotify, handling...");

  Pistache::Http::Code code = Pistache::Http::Code::Ok;

  std::string supi = ueContextId;
  Logger::amf_server().debug("SUPI (%s)", supi.c_str());

  // Handle the message in amf_app
  std::shared_ptr<itti_sbi_n1_message_notification> itti_msg =
      std::make_shared<itti_sbi_n1_message_notification>(
          TASK_AMF_SBI, TASK_AMF_APP);
  itti_msg->notification_msg = notificationData;
  itti_msg->ue_id            = supi;
  itti_msg->http_version     = 1;

  oai::amf::model::ProblemDetails problem_details = {};
  uint32_t http_code                              = {0};
  if (m_amf_app->handle_n1_message_notification(
          itti_msg, problem_details, http_code)) {
    response.send(Pistache::Http::Code(204));
  } else {
    response.headers().add<Pistache::Http::Header::ContentType>(
        Pistache::Http::Mime::MediaType("application/problem+json"));
    nlohmann::json json_data = {};
    to_json(json_data, problem_details);
    response.send(Pistache::Http::Code(http_code), json_data.dump().c_str());
  }
}

}  // namespace api
}  // namespace amf
}  // namespace oai
