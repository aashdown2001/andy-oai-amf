/**
 * Namf_EventExposure
 * Session Management Event Exposure Service. © 2019, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NamfEventExposure.h"

namespace oai {
namespace amf {
namespace model {

NamfEventExposure::NamfEventExposure() {
  m_Supi                   = "";
  m_SupiIsSet              = false;
  m_Gpsi                   = "";
  m_GpsiIsSet              = false;
  m_AnyUeInd               = false;
  m_AnyUeIndIsSet          = false;
  m_GroupId                = "";
  m_GroupIdIsSet           = false;
  m_PduSeId                = 0;
  m_PduSeIdIsSet           = false;
  m_SubId                  = "";
  m_SubIdIsSet             = false;
  m_NotifId                = "";
  m_NotifUri               = "";
  m_AltNotifIpv4AddrsIsSet = false;
  m_AltNotifIpv6AddrsIsSet = false;
  m_ImmeRep                = false;
  m_ImmeRepIsSet           = false;
  m_NotifMethodIsSet       = false;
  m_MaxReportNbr           = 0;
  m_MaxReportNbrIsSet      = false;
  m_Expiry                 = "";
  m_ExpiryIsSet            = false;
  m_RepPeriod              = 0;
  m_RepPeriodIsSet         = false;
  m_GuamiIsSet             = false;
  m_ServiveName            = "";
  m_ServiveNameIsSet       = false;
  m_SupportedFeatures      = "";
  m_SupportedFeaturesIsSet = false;
}

NamfEventExposure::~NamfEventExposure() {}

void NamfEventExposure::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const NamfEventExposure& o) {
  j = nlohmann::json();
  if (o.supiIsSet()) j["supi"] = o.m_Supi;
  if (o.gpsiIsSet()) j["gpsi"] = o.m_Gpsi;
  if (o.anyUeIndIsSet()) j["anyUeInd"] = o.m_AnyUeInd;
  if (o.groupIdIsSet()) j["groupId"] = o.m_GroupId;
  if (o.pduSeIdIsSet()) j["pduSeId"] = o.m_PduSeId;
  if (o.subIdIsSet()) j["subId"] = o.m_SubId;
  j["notifId"]  = o.m_NotifId;
  j["notifUri"] = o.m_NotifUri;
  if (o.altNotifIpv4AddrsIsSet() || !o.m_AltNotifIpv4Addrs.empty())
    j["altNotifIpv4Addrs"] = o.m_AltNotifIpv4Addrs;
  if (o.altNotifIpv6AddrsIsSet() || !o.m_AltNotifIpv6Addrs.empty())
    j["altNotifIpv6Addrs"] = o.m_AltNotifIpv6Addrs;
  j["eventSubs"] = o.m_EventSubs;
  if (o.immeRepIsSet()) j["ImmeRep"] = o.m_ImmeRep;
  if (o.notifMethodIsSet()) j["notifMethod"] = o.m_NotifMethod;
  if (o.maxReportNbrIsSet()) j["maxReportNbr"] = o.m_MaxReportNbr;
  if (o.expiryIsSet()) j["expiry"] = o.m_Expiry;
  if (o.repPeriodIsSet()) j["repPeriod"] = o.m_RepPeriod;
  if (o.guamiIsSet()) j["guami"] = o.m_Guami;
  if (o.serviveNameIsSet()) j["serviveName"] = o.m_ServiveName;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json& j, NamfEventExposure& o) {
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("anyUeInd") != j.end()) {
    j.at("anyUeInd").get_to(o.m_AnyUeInd);
    o.m_AnyUeIndIsSet = true;
  }
  if (j.find("groupId") != j.end()) {
    j.at("groupId").get_to(o.m_GroupId);
    o.m_GroupIdIsSet = true;
  }
  if (j.find("pduSeId") != j.end()) {
    j.at("pduSeId").get_to(o.m_PduSeId);
    o.m_PduSeIdIsSet = true;
  }
  if (j.find("subId") != j.end()) {
    j.at("subId").get_to(o.m_SubId);
    o.m_SubIdIsSet = true;
  }
  j.at("notifId").get_to(o.m_NotifId);
  j.at("notifUri").get_to(o.m_NotifUri);
  if (j.find("altNotifIpv4Addrs") != j.end()) {
    j.at("altNotifIpv4Addrs").get_to(o.m_AltNotifIpv4Addrs);
    o.m_AltNotifIpv4AddrsIsSet = true;
  }
  if (j.find("altNotifIpv6Addrs") != j.end()) {
    j.at("altNotifIpv6Addrs").get_to(o.m_AltNotifIpv6Addrs);
    o.m_AltNotifIpv6AddrsIsSet = true;
  }
  j.at("eventSubs").get_to(o.m_EventSubs);
  if (j.find("ImmeRep") != j.end()) {
    j.at("ImmeRep").get_to(o.m_ImmeRep);
    o.m_ImmeRepIsSet = true;
  }
  if (j.find("notifMethod") != j.end()) {
    j.at("notifMethod").get_to(o.m_NotifMethod);
    o.m_NotifMethodIsSet = true;
  }
  if (j.find("maxReportNbr") != j.end()) {
    j.at("maxReportNbr").get_to(o.m_MaxReportNbr);
    o.m_MaxReportNbrIsSet = true;
  }
  if (j.find("expiry") != j.end()) {
    j.at("expiry").get_to(o.m_Expiry);
    o.m_ExpiryIsSet = true;
  }
  if (j.find("repPeriod") != j.end()) {
    j.at("repPeriod").get_to(o.m_RepPeriod);
    o.m_RepPeriodIsSet = true;
  }
  if (j.find("guami") != j.end()) {
    j.at("guami").get_to(o.m_Guami);
    o.m_GuamiIsSet = true;
  }
  if (j.find("serviveName") != j.end()) {
    j.at("serviveName").get_to(o.m_ServiveName);
    o.m_ServiveNameIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::string NamfEventExposure::getSupi() const {
  return m_Supi;
}
void NamfEventExposure::setSupi(std::string const& value) {
  m_Supi      = value;
  m_SupiIsSet = true;
}
bool NamfEventExposure::supiIsSet() const {
  return m_SupiIsSet;
}
void NamfEventExposure::unsetSupi() {
  m_SupiIsSet = false;
}
std::string NamfEventExposure::getGpsi() const {
  return m_Gpsi;
}
void NamfEventExposure::setGpsi(std::string const& value) {
  m_Gpsi      = value;
  m_GpsiIsSet = true;
}
bool NamfEventExposure::gpsiIsSet() const {
  return m_GpsiIsSet;
}
void NamfEventExposure::unsetGpsi() {
  m_GpsiIsSet = false;
}
bool NamfEventExposure::isAnyUeInd() const {
  return m_AnyUeInd;
}
void NamfEventExposure::setAnyUeInd(bool const value) {
  m_AnyUeInd      = value;
  m_AnyUeIndIsSet = true;
}
bool NamfEventExposure::anyUeIndIsSet() const {
  return m_AnyUeIndIsSet;
}
void NamfEventExposure::unsetAnyUeInd() {
  m_AnyUeIndIsSet = false;
}
std::string NamfEventExposure::getGroupId() const {
  return m_GroupId;
}
void NamfEventExposure::setGroupId(std::string const& value) {
  m_GroupId      = value;
  m_GroupIdIsSet = true;
}
bool NamfEventExposure::groupIdIsSet() const {
  return m_GroupIdIsSet;
}
void NamfEventExposure::unsetGroupId() {
  m_GroupIdIsSet = false;
}
int32_t NamfEventExposure::getPduSeId() const {
  return m_PduSeId;
}
void NamfEventExposure::setPduSeId(int32_t const value) {
  m_PduSeId      = value;
  m_PduSeIdIsSet = true;
}
bool NamfEventExposure::pduSeIdIsSet() const {
  return m_PduSeIdIsSet;
}
void NamfEventExposure::unsetPduSeId() {
  m_PduSeIdIsSet = false;
}
std::string NamfEventExposure::getSubId() const {
  return m_SubId;
}
void NamfEventExposure::setSubId(std::string const& value) {
  m_SubId      = value;
  m_SubIdIsSet = true;
}
bool NamfEventExposure::subIdIsSet() const {
  return m_SubIdIsSet;
}
void NamfEventExposure::unsetSubId() {
  m_SubIdIsSet = false;
}
std::string NamfEventExposure::getNotifId() const {
  return m_NotifId;
}
void NamfEventExposure::setNotifId(std::string const& value) {
  m_NotifId = value;
}
std::string NamfEventExposure::getNotifUri() const {
  return m_NotifUri;
}
void NamfEventExposure::setNotifUri(std::string const& value) {
  m_NotifUri = value;
}
std::vector<std::string>& NamfEventExposure::getAltNotifIpv4Addrs() {
  return m_AltNotifIpv4Addrs;
}
void NamfEventExposure::setAltNotifIpv4Addrs(
    std::vector<std::string> const& value) {
  m_AltNotifIpv4Addrs      = value;
  m_AltNotifIpv4AddrsIsSet = true;
}
bool NamfEventExposure::altNotifIpv4AddrsIsSet() const {
  return m_AltNotifIpv4AddrsIsSet;
}
void NamfEventExposure::unsetAltNotifIpv4Addrs() {
  m_AltNotifIpv4AddrsIsSet = false;
}
std::vector<Ipv6Addr>& NamfEventExposure::getAltNotifIpv6Addrs() {
  return m_AltNotifIpv6Addrs;
}
void NamfEventExposure::setAltNotifIpv6Addrs(
    std::vector<Ipv6Addr> const& value) {
  m_AltNotifIpv6Addrs      = value;
  m_AltNotifIpv6AddrsIsSet = true;
}
bool NamfEventExposure::altNotifIpv6AddrsIsSet() const {
  return m_AltNotifIpv6AddrsIsSet;
}
void NamfEventExposure::unsetAltNotifIpv6Addrs() {
  m_AltNotifIpv6AddrsIsSet = false;
}
std::vector<EventSubscription>& NamfEventExposure::getEventSubs() {
  return m_EventSubs;
}
void NamfEventExposure::setEventSubs(
    std::vector<EventSubscription> const& value) {
  m_EventSubs = value;
}
bool NamfEventExposure::isImmeRep() const {
  return m_ImmeRep;
}
void NamfEventExposure::setImmeRep(bool const value) {
  m_ImmeRep      = value;
  m_ImmeRepIsSet = true;
}
bool NamfEventExposure::immeRepIsSet() const {
  return m_ImmeRepIsSet;
}
void NamfEventExposure::unsetImmeRep() {
  m_ImmeRepIsSet = false;
}
NotificationMethod NamfEventExposure::getNotifMethod() const {
  return m_NotifMethod;
}
void NamfEventExposure::setNotifMethod(NotificationMethod const& value) {
  m_NotifMethod      = value;
  m_NotifMethodIsSet = true;
}
bool NamfEventExposure::notifMethodIsSet() const {
  return m_NotifMethodIsSet;
}
void NamfEventExposure::unsetNotifMethod() {
  m_NotifMethodIsSet = false;
}
int32_t NamfEventExposure::getMaxReportNbr() const {
  return m_MaxReportNbr;
}
void NamfEventExposure::setMaxReportNbr(int32_t const value) {
  m_MaxReportNbr      = value;
  m_MaxReportNbrIsSet = true;
}
bool NamfEventExposure::maxReportNbrIsSet() const {
  return m_MaxReportNbrIsSet;
}
void NamfEventExposure::unsetMaxReportNbr() {
  m_MaxReportNbrIsSet = false;
}
std::string NamfEventExposure::getExpiry() const {
  return m_Expiry;
}
void NamfEventExposure::setExpiry(std::string const& value) {
  m_Expiry      = value;
  m_ExpiryIsSet = true;
}
bool NamfEventExposure::expiryIsSet() const {
  return m_ExpiryIsSet;
}
void NamfEventExposure::unsetExpiry() {
  m_ExpiryIsSet = false;
}
int32_t NamfEventExposure::getRepPeriod() const {
  return m_RepPeriod;
}
void NamfEventExposure::setRepPeriod(int32_t const value) {
  m_RepPeriod      = value;
  m_RepPeriodIsSet = true;
}
bool NamfEventExposure::repPeriodIsSet() const {
  return m_RepPeriodIsSet;
}
void NamfEventExposure::unsetRepPeriod() {
  m_RepPeriodIsSet = false;
}
Guami NamfEventExposure::getGuami() const {
  return m_Guami;
}
void NamfEventExposure::setGuami(Guami const& value) {
  m_Guami      = value;
  m_GuamiIsSet = true;
}
bool NamfEventExposure::guamiIsSet() const {
  return m_GuamiIsSet;
}
void NamfEventExposure::unsetGuami() {
  m_GuamiIsSet = false;
}
std::string NamfEventExposure::getServiveName() const {
  return m_ServiveName;
}
void NamfEventExposure::setServiveName(std::string const& value) {
  m_ServiveName      = value;
  m_ServiveNameIsSet = true;
}
bool NamfEventExposure::serviveNameIsSet() const {
  return m_ServiveNameIsSet;
}
void NamfEventExposure::unsetServiveName() {
  m_ServiveNameIsSet = false;
}
std::string NamfEventExposure::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void NamfEventExposure::setSupportedFeatures(std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool NamfEventExposure::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void NamfEventExposure::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

}  // namespace model
}  // namespace amf
}  // namespace oai
